// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/14/2019 20:43:30"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    bancoRegistradores
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module bancoRegistradores_vlg_sample_tst(
	addR1,
	addR2,
	addWr,
	clk,
	dadoWr,
	rst,
	wrEn,
	sampler_tx
);
input [2:0] addR1;
input [2:0] addR2;
input [2:0] addWr;
input  clk;
input [7:0] dadoWr;
input  rst;
input  wrEn;
output sampler_tx;

reg sample;
time current_time;
always @(addR1 or addR2 or addWr or clk or dadoWr or rst or wrEn)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module bancoRegistradores_vlg_check_tst (
	dadoR1,
	dadoR2,
	sampler_rx
);
input [7:0] dadoR1;
input [7:0] dadoR2;
input sampler_rx;

reg [7:0] dadoR1_expected;
reg [7:0] dadoR2_expected;

reg [7:0] dadoR1_prev;
reg [7:0] dadoR2_prev;

reg [7:0] dadoR1_expected_prev;
reg [7:0] dadoR2_expected_prev;

reg [7:0] last_dadoR1_exp;
reg [7:0] last_dadoR2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	dadoR1_prev = dadoR1;
	dadoR2_prev = dadoR2;
end

// update expected /o prevs

always @(trigger)
begin
	dadoR1_expected_prev = dadoR1_expected;
	dadoR2_expected_prev = dadoR2_expected;
end


// expected dadoR1[ 7 ]
initial
begin
	dadoR1_expected[7] = 1'bX;
end 
// expected dadoR1[ 6 ]
initial
begin
	dadoR1_expected[6] = 1'bX;
end 
// expected dadoR1[ 5 ]
initial
begin
	dadoR1_expected[5] = 1'bX;
end 
// expected dadoR1[ 4 ]
initial
begin
	dadoR1_expected[4] = 1'bX;
end 
// expected dadoR1[ 3 ]
initial
begin
	dadoR1_expected[3] = 1'bX;
end 
// expected dadoR1[ 2 ]
initial
begin
	dadoR1_expected[2] = 1'bX;
end 
// expected dadoR1[ 1 ]
initial
begin
	dadoR1_expected[1] = 1'bX;
end 
// expected dadoR1[ 0 ]
initial
begin
	dadoR1_expected[0] = 1'bX;
end 
// expected dadoR2[ 7 ]
initial
begin
	dadoR2_expected[7] = 1'bX;
end 
// expected dadoR2[ 6 ]
initial
begin
	dadoR2_expected[6] = 1'bX;
end 
// expected dadoR2[ 5 ]
initial
begin
	dadoR2_expected[5] = 1'bX;
end 
// expected dadoR2[ 4 ]
initial
begin
	dadoR2_expected[4] = 1'bX;
end 
// expected dadoR2[ 3 ]
initial
begin
	dadoR2_expected[3] = 1'bX;
end 
// expected dadoR2[ 2 ]
initial
begin
	dadoR2_expected[2] = 1'bX;
end 
// expected dadoR2[ 1 ]
initial
begin
	dadoR2_expected[1] = 1'bX;
end 
// expected dadoR2[ 0 ]
initial
begin
	dadoR2_expected[0] = 1'bX;
end 
// generate trigger
always @(dadoR1_expected or dadoR1 or dadoR2_expected or dadoR2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dadoR1 = %b | expected dadoR2 = %b | ",dadoR1_expected_prev,dadoR2_expected_prev);
	$display("| real dadoR1 = %b | real dadoR2 = %b | ",dadoR1_prev,dadoR2_prev);
`endif
	if (
		( dadoR1_expected_prev[0] !== 1'bx ) && ( dadoR1_prev[0] !== dadoR1_expected_prev[0] )
		&& ((dadoR1_expected_prev[0] !== last_dadoR1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoR1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoR1_expected_prev);
		$display ("     Real value = %b", dadoR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoR1_exp[0] = dadoR1_expected_prev[0];
	end
	if (
		( dadoR1_expected_prev[1] !== 1'bx ) && ( dadoR1_prev[1] !== dadoR1_expected_prev[1] )
		&& ((dadoR1_expected_prev[1] !== last_dadoR1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoR1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoR1_expected_prev);
		$display ("     Real value = %b", dadoR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoR1_exp[1] = dadoR1_expected_prev[1];
	end
	if (
		( dadoR1_expected_prev[2] !== 1'bx ) && ( dadoR1_prev[2] !== dadoR1_expected_prev[2] )
		&& ((dadoR1_expected_prev[2] !== last_dadoR1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoR1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoR1_expected_prev);
		$display ("     Real value = %b", dadoR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoR1_exp[2] = dadoR1_expected_prev[2];
	end
	if (
		( dadoR1_expected_prev[3] !== 1'bx ) && ( dadoR1_prev[3] !== dadoR1_expected_prev[3] )
		&& ((dadoR1_expected_prev[3] !== last_dadoR1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoR1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoR1_expected_prev);
		$display ("     Real value = %b", dadoR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoR1_exp[3] = dadoR1_expected_prev[3];
	end
	if (
		( dadoR1_expected_prev[4] !== 1'bx ) && ( dadoR1_prev[4] !== dadoR1_expected_prev[4] )
		&& ((dadoR1_expected_prev[4] !== last_dadoR1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoR1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoR1_expected_prev);
		$display ("     Real value = %b", dadoR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoR1_exp[4] = dadoR1_expected_prev[4];
	end
	if (
		( dadoR1_expected_prev[5] !== 1'bx ) && ( dadoR1_prev[5] !== dadoR1_expected_prev[5] )
		&& ((dadoR1_expected_prev[5] !== last_dadoR1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoR1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoR1_expected_prev);
		$display ("     Real value = %b", dadoR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoR1_exp[5] = dadoR1_expected_prev[5];
	end
	if (
		( dadoR1_expected_prev[6] !== 1'bx ) && ( dadoR1_prev[6] !== dadoR1_expected_prev[6] )
		&& ((dadoR1_expected_prev[6] !== last_dadoR1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoR1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoR1_expected_prev);
		$display ("     Real value = %b", dadoR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoR1_exp[6] = dadoR1_expected_prev[6];
	end
	if (
		( dadoR1_expected_prev[7] !== 1'bx ) && ( dadoR1_prev[7] !== dadoR1_expected_prev[7] )
		&& ((dadoR1_expected_prev[7] !== last_dadoR1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoR1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoR1_expected_prev);
		$display ("     Real value = %b", dadoR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoR1_exp[7] = dadoR1_expected_prev[7];
	end
	if (
		( dadoR2_expected_prev[0] !== 1'bx ) && ( dadoR2_prev[0] !== dadoR2_expected_prev[0] )
		&& ((dadoR2_expected_prev[0] !== last_dadoR2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoR2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoR2_expected_prev);
		$display ("     Real value = %b", dadoR2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoR2_exp[0] = dadoR2_expected_prev[0];
	end
	if (
		( dadoR2_expected_prev[1] !== 1'bx ) && ( dadoR2_prev[1] !== dadoR2_expected_prev[1] )
		&& ((dadoR2_expected_prev[1] !== last_dadoR2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoR2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoR2_expected_prev);
		$display ("     Real value = %b", dadoR2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoR2_exp[1] = dadoR2_expected_prev[1];
	end
	if (
		( dadoR2_expected_prev[2] !== 1'bx ) && ( dadoR2_prev[2] !== dadoR2_expected_prev[2] )
		&& ((dadoR2_expected_prev[2] !== last_dadoR2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoR2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoR2_expected_prev);
		$display ("     Real value = %b", dadoR2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoR2_exp[2] = dadoR2_expected_prev[2];
	end
	if (
		( dadoR2_expected_prev[3] !== 1'bx ) && ( dadoR2_prev[3] !== dadoR2_expected_prev[3] )
		&& ((dadoR2_expected_prev[3] !== last_dadoR2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoR2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoR2_expected_prev);
		$display ("     Real value = %b", dadoR2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoR2_exp[3] = dadoR2_expected_prev[3];
	end
	if (
		( dadoR2_expected_prev[4] !== 1'bx ) && ( dadoR2_prev[4] !== dadoR2_expected_prev[4] )
		&& ((dadoR2_expected_prev[4] !== last_dadoR2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoR2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoR2_expected_prev);
		$display ("     Real value = %b", dadoR2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoR2_exp[4] = dadoR2_expected_prev[4];
	end
	if (
		( dadoR2_expected_prev[5] !== 1'bx ) && ( dadoR2_prev[5] !== dadoR2_expected_prev[5] )
		&& ((dadoR2_expected_prev[5] !== last_dadoR2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoR2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoR2_expected_prev);
		$display ("     Real value = %b", dadoR2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoR2_exp[5] = dadoR2_expected_prev[5];
	end
	if (
		( dadoR2_expected_prev[6] !== 1'bx ) && ( dadoR2_prev[6] !== dadoR2_expected_prev[6] )
		&& ((dadoR2_expected_prev[6] !== last_dadoR2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoR2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoR2_expected_prev);
		$display ("     Real value = %b", dadoR2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoR2_exp[6] = dadoR2_expected_prev[6];
	end
	if (
		( dadoR2_expected_prev[7] !== 1'bx ) && ( dadoR2_prev[7] !== dadoR2_expected_prev[7] )
		&& ((dadoR2_expected_prev[7] !== last_dadoR2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoR2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoR2_expected_prev);
		$display ("     Real value = %b", dadoR2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoR2_exp[7] = dadoR2_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module bancoRegistradores_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] addR1;
reg [2:0] addR2;
reg [2:0] addWr;
reg clk;
reg [7:0] dadoWr;
reg rst;
reg wrEn;
// wires                                               
wire [7:0] dadoR1;
wire [7:0] dadoR2;

wire sampler;                             

// assign statements (if any)                          
bancoRegistradores i1 (
// port map - connection between master ports and signals/registers   
	.addR1(addR1),
	.addR2(addR2),
	.addWr(addWr),
	.clk(clk),
	.dadoR1(dadoR1),
	.dadoR2(dadoR2),
	.dadoWr(dadoWr),
	.rst(rst),
	.wrEn(wrEn)
);

// clk
initial
begin
	repeat(16)
	begin
		clk = 1'b0;
		clk = #30000 1'b1;
		# 30000;
	end
	clk = 1'b0;
	clk = #30000 1'b1;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #20000 1'b1;
	rst = #600000 1'b0;
	rst = #20000 1'b1;
end 
// addR1[ 2 ]
initial
begin
	repeat(4)
	begin
		addR1[2] = 1'b0;
		addR1[2] = #120000 1'b1;
		# 120000;
	end
	addR1[2] = 1'b0;
end 
// addR1[ 1 ]
initial
begin
	repeat(8)
	begin
		addR1[1] = 1'b0;
		addR1[1] = #60000 1'b1;
		# 60000;
	end
	addR1[1] = 1'b0;
end 
// addR1[ 0 ]
initial
begin
	repeat(16)
	begin
		addR1[0] = 1'b0;
		addR1[0] = #30000 1'b1;
		# 30000;
	end
	addR1[0] = 1'b0;
	addR1[0] = #30000 1'b1;
end 
// addR2[ 2 ]
initial
begin
	addR2[2] = 1'b0;
	# 60000;
	repeat(3)
	begin
		addR2[2] = 1'b1;
		addR2[2] = #120000 1'b0;
		# 120000;
	end
	addR2[2] = 1'b1;
	addR2[2] = #120000 1'b0;
end 
// addR2[ 1 ]
initial
begin
	repeat(8)
	begin
		addR2[1] = 1'b1;
		addR2[1] = #60000 1'b0;
		# 60000;
	end
	addR2[1] = 1'b1;
end 
// addR2[ 0 ]
initial
begin
	repeat(16)
	begin
		addR2[0] = 1'b0;
		addR2[0] = #30000 1'b1;
		# 30000;
	end
	addR2[0] = 1'b0;
	addR2[0] = #30000 1'b1;
end 
// addWr[ 2 ]
initial
begin
	repeat(4)
	begin
		addWr[2] = 1'b0;
		addWr[2] = #120000 1'b1;
		# 120000;
	end
	addWr[2] = 1'b0;
end 
// addWr[ 1 ]
initial
begin
	repeat(8)
	begin
		addWr[1] = 1'b0;
		addWr[1] = #60000 1'b1;
		# 60000;
	end
	addWr[1] = 1'b0;
end 
// addWr[ 0 ]
initial
begin
	repeat(16)
	begin
		addWr[0] = 1'b0;
		addWr[0] = #30000 1'b1;
		# 30000;
	end
	addWr[0] = 1'b0;
	addWr[0] = #30000 1'b1;
end 
// dadoWr[ 7 ]
initial
begin
	dadoWr[7] = 1'b0;
end 
// dadoWr[ 6 ]
initial
begin
	dadoWr[6] = 1'b1;
end 
// dadoWr[ 5 ]
initial
begin
	dadoWr[5] = 1'b0;
end 
// dadoWr[ 4 ]
initial
begin
	dadoWr[4] = 1'b1;
end 
// dadoWr[ 3 ]
initial
begin
	dadoWr[3] = 1'b0;
end 
// dadoWr[ 2 ]
initial
begin
	dadoWr[2] = 1'b1;
end 
// dadoWr[ 1 ]
initial
begin
	dadoWr[1] = 1'b0;
end 
// dadoWr[ 0 ]
initial
begin
	dadoWr[0] = 1'b1;
end 

// wrEn
initial
begin
	wrEn = 1'b0;
	wrEn = #360000 1'b1;
	wrEn = #220000 1'b0;
end 

bancoRegistradores_vlg_sample_tst tb_sample (
	.addR1(addR1),
	.addR2(addR2),
	.addWr(addWr),
	.clk(clk),
	.dadoWr(dadoWr),
	.rst(rst),
	.wrEn(wrEn),
	.sampler_tx(sampler)
);

bancoRegistradores_vlg_check_tst tb_out(
	.dadoR1(dadoR1),
	.dadoR2(dadoR2),
	.sampler_rx(sampler)
);
endmodule

